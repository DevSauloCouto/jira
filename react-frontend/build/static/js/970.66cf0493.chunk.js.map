{"version":3,"file":"static/js/970.66cf0493.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/textarea/dist/index.esm.js","components/issue/CreateIssueModal.tsx"],"sourcesContent":["// ../../react-shim.js\nimport React from \"react\";\n\n// src/textarea.tsx\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\n\n// ../../utilities/shared-utils/dist/index.esm.js\nvar cx = (...classNames) => classNames.filter(Boolean).join(\" \");\n\n// ../../utilities/object-utils/dist/index.esm.js\nfunction omit(object, keysToOmit = []) {\n  const clone = Object.assign({}, object);\n  for (const key of keysToOmit) {\n    if (key in clone)\n      delete clone[key];\n  }\n  return clone;\n}\n\n// src/textarea.tsx\nvar omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\nvar Textarea = forwardRef((props, ref) => {\n  const styles = useStyleConfig(\"Textarea\", props);\n  const { className, rows, ...rest } = omitThemingProps(props);\n  const textareaProps = useFormControl(rest);\n  const textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /* @__PURE__ */ React.createElement(chakra.textarea, {\n    ref,\n    rows,\n    ...textareaProps,\n    className: cx(\"chakra-textarea\", className),\n    __css: textareaStyles\n  });\n});\nTextarea.displayName = \"Textarea\";\nexport {\n  Textarea\n};\n","import { Button, Input, Text, Textarea } from '@chakra-ui/react';\nimport { useReducer, useState } from 'react';\nimport { Navigate, useParams } from 'react-router-dom';\nimport ResizeTextarea from 'react-textarea-autosize';\nimport { APIERROR, CreateIssue } from '../../api/apiTypes';\nimport { selectAuthUser } from '../../api/auth.endpoint';\nimport { useCreateIssueMutation } from '../../api/issues.endpoint';\nimport DropDown from '../util/DropDown';\nimport WithLabel from '../util/WithLabel';\nimport Item from '../util/Item';\nimport type { IssueModalProps } from './IssueModelHOC';\nimport Model from '../util/Model';\n\nconst CreateIssueModel = (props: IssueModalProps) => {\n  const { lists, members, types, priorities, onClose } = props;\n  const { authUser } = selectAuthUser();\n  const [createIssue, { error, isLoading }] = useCreateIssueMutation();\n  const [form, dispatch] = useReducer(reducer, initial);\n  const [isInvalid, setIsInvalid] = useState(false);\n  const projectId = Number(useParams().projectId);\n\n  if (!authUser) return null;\n\n  if (error && (error as APIERROR).status === 401) return <Navigate to='/login' />;\n\n  const handleCreateIssue = async () => {\n    if (!form.summary || !authUser) return setIsInvalid(true);\n    await createIssue({ ...form, reporterId: authUser.id, projectId }); //for now\n    onClose();\n  };\n\n  return (\n    <Model onSubmit={handleCreateIssue} {...{ onClose, isLoading }} className='max-w-[35rem]'>\n      <>\n        <span className='font-[600] text-[22px] text-c-1'>Create Issue</span>\n        <WithLabel label='Issue type'>\n          <DropDown list={types} dispatch={dispatch} actionType='type' type='normal' />\n        </WithLabel>\n        <WithLabel label='Short summary'>\n          <>\n            <Input\n              size='sm'\n              variant='filled'\n              borderWidth={1}\n              borderColor='gray.300'\n              _focus={{ borderWidth: 2 }}\n              value={form.summary}\n              color='black'\n              onChange={(e) => dispatch({ type: 'summary', value: e.target.value })}\n              isRequired\n            />\n            {isInvalid && (\n              <span className='text-[13px] text-red-500'>summary must not be empty</span>\n            )}\n          </>\n        </WithLabel>\n        <WithLabel label='Description'>\n          <Textarea\n            minH='unset'\n            overflow='hidden'\n            resize='none'\n            minRows={3}\n            as={ResizeTextarea}\n            borderRadius={2}\n            value={form.descr}\n            color='black'\n            onChange={(e) => dispatch({ type: 'descr', value: e.target.value })}\n          />\n        </WithLabel>\n        {members && (\n          <WithLabel label='Reporter'>\n            <Button\n              display='flex'\n              justifyContent='start'\n              size='sm'\n              w='full'\n              borderWidth={1}\n              borderColor='gray.300'\n              borderRadius={3}\n              px={4}\n            >\n              <Item\n                {...members.filter(({ value: v }) => v === authUser.id)[0]}\n                className='w-6 h-6 mr-4 rounded-full object-cover'\n              />\n            </Button>\n          </WithLabel>\n        )}\n        {members && (\n          <WithLabel label='Assignee'>\n            <DropDown list={members} dispatch={dispatch} actionType='assignee' type='multiple' />\n          </WithLabel>\n        )}\n        <WithLabel label='Priority'>\n          <DropDown list={priorities} dispatch={dispatch} actionType='priority' type='normal' />\n        </WithLabel>\n        {lists && (\n          <WithLabel label='Status'>\n            <DropDown list={lists} dispatch={dispatch} actionType='listId' type='normal' />\n          </WithLabel>\n        )}\n      </>\n    </Model>\n  );\n};\n\nexport default CreateIssueModel;\n\nexport type T = 'type' | 'summary' | 'descr' | 'assignee' | 'priority' | 'listId';\n\nexport type A = { type: T; value: number | number[] | string };\n\nconst initial: State = {\n  descr: '',\n  summary: '',\n  priority: 0,\n  type: 0,\n  reporterId: null,\n  assignees: [],\n  listId: null,\n};\n\ntype State = Omit<CreateIssue, 'projectId'>;\n\nconst reducer = (state: State, { type, value }: A): State => {\n  switch (type) {\n    case 'type':\n      return { ...state, type: value as number };\n    case 'summary':\n      return { ...state, summary: value as string };\n    case 'descr':\n      return { ...state, descr: value as string };\n    case 'assignee':\n      return { ...state, assignees: value as number[] };\n    case 'priority':\n      return { ...state, priority: value as number };\n    case 'listId':\n      return { ...state, listId: value as number };\n    default:\n      return state;\n  }\n};\n"],"names":["cx","classNames","filter","Boolean","join","omitted","Textarea","forwardRef","props","ref","styles","useStyleConfig","omitThemingProps","className","rows","rest","textareaProps","useFormControl","textareaStyles","object","keysToOmit","clone","Object","assign","key","omit","React","chakra","__css","displayName","lists","members","types","priorities","onClose","authUser","selectAuthUser","useCreateIssueMutation","createIssue","error","isLoading","useReducer","reducer","initial","form","dispatch","useState","isInvalid","setIsInvalid","projectId","Number","useParams","status","to","handleCreateIssue","summary","reporterId","id","Model","onSubmit","WithLabel","label","DropDown","list","actionType","type","size","variant","borderWidth","borderColor","_focus","value","color","onChange","e","target","isRequired","minH","overflow","resize","minRows","as","ResizeTextarea","borderRadius","descr","display","justifyContent","w","px","Item","priority","assignees","listId","state"],"sourceRoot":""}