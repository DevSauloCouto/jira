{"version":3,"file":"static/js/308.09c9c392.chunk.js","mappings":"mRA8DA,MAxDA,YAAyD,IAA1BA,EAAyB,EAA/BC,KACvB,GAAyBC,EAAAA,EAAAA,MAAlBC,GAAP,eACA,GAIIC,EAAAA,EAAAA,MAHFC,EADF,EACEA,SACAC,EAFF,EAEEA,aAFF,IAGEC,UAAaC,EAHf,EAGeA,OAAsBC,EAHrC,EAGuBC,aAGjBC,EAAY,yCAAG,WAAOC,GAAP,yEAEhBZ,IACAY,EAAKC,WAAab,EAAEa,UAAYD,EAAKE,QAAUd,EAAEc,OAASF,EAAKG,aAAef,EAAEe,YAHhE,iEAMbZ,EAAeS,GANF,2CAAH,sDAQlB,OACE,iCACE,iBAAKI,UAAU,uCAAf,WACE,SAACC,EAAA,EAAD,CACEC,MAAM,WACNC,YAAY,WACZC,aAAcpB,EAAEa,SAChBR,SAAUA,EAAS,WAAY,CAC7BgB,SAAU,CAAEC,OAAO,EAAMC,QAAS,gCAEpCC,MAAOhB,EAAOK,SACdY,aAAW,KAEb,SAACR,EAAA,EAAD,CACEC,MAAM,QACNC,YAAY,QACZC,aAAcpB,EAAEc,MAChBT,SAAUA,EAAS,QAAS,CAC1BgB,SAAU,CAAEC,OAAO,EAAMC,QAAS,gCAEpCC,MAAOhB,EAAOM,MACdY,UAAQ,EACRD,aAAW,KAEb,SAACR,EAAA,EAAD,CACEC,MAAM,YACNC,YAAY,kBACZC,aAAcpB,EAAEe,WAChBV,SAAUA,EAAS,cACnBmB,MAAOhB,EAAOO,WACdU,aAAW,QAGf,mBAAQE,QAASrB,EAAaK,GAAeK,UAAU,mBAAvD,SACGP,EAAU,aAAe,mBAIjC,ECvDKmB,GAAYC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAEjBC,EAAU,WACd,OAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACkBjC,GAAMkC,EAAAA,EAAAA,MAAhBC,SAER,OACE,gBAAKnB,UAAU,+EAAf,SACGhB,GACC,iCACE,SAAC,MAAD,WACE,SAAC,KAAD,CAAQoC,IAAG,OAAEpC,QAAF,IAAEA,OAAF,EAAEA,EAAGe,WAAYsB,KAAI,OAAErC,QAAF,IAAEA,OAAF,EAAEA,EAAGa,SAAUyB,EAAG,GAAIC,EAAG,OAE1DP,GACC,SAAC,EAAD,CAAe/B,KAAMD,KAErB,SAAC,EAAAwC,SAAD,WACE,SAACZ,EAAD,OAGJ,mBACED,QAAS,kBAAMM,GAAY,SAACQ,GAAD,OAAQA,CAAR,GAAlB,EACTzB,UAAU,yCAFZ,SAIGgB,EAAW,kBAAoB,aAElC,iBAAKhB,UAAU,0BAAf,WACE,SAAC0B,EAAD,CAAUC,KAAK,iBAAiBC,KAAM5C,EAAE6C,gBACxC,SAACH,EAAD,CAAUC,KAAK,YAAYC,KAAM5C,EAAE8C,gBAErC,SAAC,KAAD,CAAMC,GAAG,SAAS/B,UAAU,oCAA5B,+BAIA,MAGT,EAED,GAAegC,EAAAA,EAAAA,MAAKlB,GAEdY,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACf,kBAAM5B,UAAU,QAAhB,UACG2B,GACD,iBAAM3B,UAAU,mCAAhB,SAAoD,IAAIiC,KAAKL,GAAMM,yBAHtD,C","sources":["components/home/UpdateProfile.tsx","components/home/Profile.tsx"],"sourcesContent":["import React from 'react';\nimport { FieldError, FieldValues, useForm } from 'react-hook-form';\nimport { AuthUser } from '../../api/apiTypes';\nimport { useUpdateAuthUserMutation } from '../../api/auth.endpoint';\nimport InputWithValidation from '../util/InputWithValidation';\n\nfunction UpdateProfile({ user: u }: { user: AuthUser }) {\n  const [updateAuthUser] = useUpdateAuthUserMutation();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting: loading },\n  } = useForm();\n\n  const handleUpdate = async (form: FieldValues) => {\n    if (\n      !u ||\n      (form.username === u.username && form.email === u.email && form.profileUrl === u.profileUrl)\n    )\n      return;\n    await updateAuthUser(form);\n  };\n  return (\n    <>\n      <div className='flex flex-col gap-4 mt-8 w-[16.5rem]'>\n        <InputWithValidation\n          label='Username'\n          placeholder='username'\n          defaultValue={u.username}\n          register={register('username', {\n            required: { value: true, message: 'username must not be empty' },\n          })}\n          error={errors.username as FieldError}\n          darkEnabled\n        />\n        <InputWithValidation\n          label='Email'\n          placeholder='email'\n          defaultValue={u.email}\n          register={register('email', {\n            required: { value: true, message: 'username must not be empty' },\n          })}\n          error={errors.email as FieldError}\n          readOnly\n          darkEnabled\n        />\n        <InputWithValidation\n          label='Photo Url'\n          placeholder='profile picture'\n          defaultValue={u.profileUrl}\n          register={register('profileUrl')}\n          error={errors.profileUrl as FieldError}\n          darkEnabled\n        />\n      </div>\n      <button onClick={handleSubmit(handleUpdate)} className='btn w-full mt-10'>\n        {loading ? 'saving ...' : 'Save Changes'}\n      </button>\n    </>\n  );\n}\n\nexport default UpdateProfile;\n","import { Avatar, ChakraProvider as CP } from '@chakra-ui/react';\nimport { lazy, memo, Suspense, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { selectAuthUser } from '../../api/auth.endpoint';\nimport UpdateProfile from './UpdateProfile';\nconst ChangePwd = lazy(() => import('./ChangePwd'));\n\nconst Profile = () => {\n  const [isNormal, setIsNormal] = useState(true);\n  const { authUser: u } = selectAuthUser();\n\n  return (\n    <div className='w-[320px] flex flex-col items-center bg-c-1 border-r-2 border-c-3 h-full p-6'>\n      {u ? (\n        <>\n          <CP>\n            <Avatar src={u?.profileUrl} name={u?.username} w={40} h={40} />\n          </CP>\n          {isNormal ? (\n            <UpdateProfile user={u} />\n          ) : (\n            <Suspense>\n              <ChangePwd />\n            </Suspense>\n          )}\n          <button\n            onClick={() => setIsNormal((p) => !p)}\n            className='text-center text-c-text underline mt-5'\n          >\n            {isNormal ? 'Change password' : 'Go back'}\n          </button>\n          <div className='mt-auto w-full text-c-5'>\n            <Metadata text='Last logged In' date={u.lastLoggedIn} />\n            <Metadata text='Joined At' date={u.createdAt} />\n          </div>\n          <Link to='/adios' className='btn-alert w-full mt-3 text-center'>\n            Delete account\n          </Link>\n        </>\n      ) : null}\n    </div>\n  );\n};\n\nexport default memo(Profile);\n\nconst Metadata = ({ text, date }: { text: string; date: string }) => (\n  <span className='block'>\n    {text}\n    <span className='tracking-wide font-semibold ml-3'>{new Date(date).toLocaleDateString()}</span>\n  </span>\n);\n"],"names":["u","user","useUpdateAuthUserMutation","updateAuthUser","useForm","register","handleSubmit","formState","errors","loading","isSubmitting","handleUpdate","form","username","email","profileUrl","className","InputWithValidation","label","placeholder","defaultValue","required","value","message","error","darkEnabled","readOnly","onClick","ChangePwd","lazy","Profile","useState","isNormal","setIsNormal","selectAuthUser","authUser","src","name","w","h","Suspense","p","Metadata","text","date","lastLoggedIn","createdAt","to","memo","Date","toLocaleDateString"],"sourceRoot":""}