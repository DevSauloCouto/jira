{"version":3,"file":"static/js/59.3a964ae7.chunk.js","mappings":"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","sources":["components/issue/TextInput.tsx","components/issue/IssueDetailModal.tsx"],"sourcesContent":["import { Button } from '@chakra-ui/react';\nimport { ChangeEvent, useState } from 'react';\nimport RTAutosize from 'react-textarea-autosize';\nimport { UpdateIssueType } from '../../api/apiTypes';\nimport WithLabel from '../util/WithLabel';\nimport type { DispatchMiddleware } from './IssueDetailModal';\n\ninterface Props {\n  type: UpdateIssueType;\n  label?: string;\n  placeholder?: string;\n  defaultValue: string;\n  className?: string;\n  isRequired?: boolean;\n  apiFunc: (data: DispatchMiddleware) => void;\n}\n\nconst TextInput = (props: Props) => {\n  const { type, label, defaultValue, placeholder, apiFunc, className, isRequired } = props;\n  const [value, setValue] = useState(defaultValue ?? '');\n  const [isEditing, setIsEditing] = useState(false);\n\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    !isEditing && setIsEditing(true);\n    const newValue = e.target.value;\n    setValue(newValue);\n  };\n\n  const handleCancel = () => {\n    setValue(defaultValue);\n    setIsEditing(false);\n  };\n\n  const handleSave = () => {\n    setIsEditing(false);\n    if (value === defaultValue || (!value && isRequired)) return;\n    apiFunc({ type, value });\n  };\n\n  return (\n    <div>\n      <WithLabel label={label ?? ''} labelClass='ml-3'>\n        <>\n          <RTAutosize\n            className={`px-3 py-2 w-full border-2 border-transparent resize-none hover:bg-[#f4f5f7] rounded-[3px] outline-none focus:border-chakra-blue ${\n              className ?? 'text-[18px] font-medium'\n            }`}\n            minRows={1}\n            onChange={handleChange}\n            {...{ value, placeholder }}\n          />\n          {isEditing && (\n            <>\n              <hr className='border-t-[.5px] border-gray-400 mt-3 mb-2 mx-3' />\n              <div className='flex justify-end'>\n                <Button onClick={handleCancel} size='sm' borderRadius={3} variant='ghost' mr={3}>\n                  cancel\n                </Button>\n                <Button onClick={handleSave} size='sm' borderRadius={3} colorScheme='blue'>\n                  save\n                </Button>\n              </div>\n            </>\n          )}\n        </>\n      </WithLabel>\n    </div>\n  );\n};\n\nexport default TextInput;\n","import { ChakraProvider } from '@chakra-ui/react';\nimport { Icon } from '@iconify/react';\nimport { lazy, Suspense, useState } from 'react';\nimport { UpdateIssueType } from '../../api/apiTypes';\nimport {\n  selectIssuesArray,\n  useDeleteIssueMutation,\n  useUpdateIssueMutation,\n} from '../../api/issues.endpoint';\nimport DropDown from '../util/DropDown';\nimport WithLabel from '../util/WithLabel';\nimport Item from '../util/Item';\nimport type { IssueModalProps } from './IssueModelHOC';\nimport TextInput from './TextInput';\nimport Model from '../util/Model';\nconst ConfirmModel = lazy(() => import('../util/ConfirmModel'));\n\nconst constructApiAssignee = (OLD: number[], NEW: number[]): DispatchMiddleware | undefined => {\n  const oldLen = OLD.length,\n    newLen = NEW.length;\n  if (oldLen === newLen) return;\n  const userId = newLen > oldLen ? NEW[newLen - 1] : OLD.filter((id) => !NEW.includes(id))[0];\n  return { type: newLen > oldLen ? 'addAssignee' : 'removeAssignee', value: userId };\n};\n\nconst IssueDetailModal = (props: IssueModalProps) => {\n  const { issue, projectId, members, lists, types, priorities, onClose } = props;\n  const { issues } = selectIssuesArray({\n    listId: issue?.listId as number,\n    projectId,\n  });\n  const {\n    id,\n    type,\n    listId,\n    reporterId,\n    priority,\n    assignees,\n    summary,\n    descr,\n    createdAt,\n    updatedAt,\n  } = issues[issue?.idx as number];\n  const memberObj = members.reduce((t, n) => ({ ...t, [n.value]: n }), {});\n  const [updateIssue] = useUpdateIssueMutation();\n  const [deleteIssue] = useDeleteIssueMutation();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const dispatchMiddleware = (data: DispatchMiddleware) => {\n    const assigneeIds = assignees.map(({ userId }) => userId);\n    const body =\n      data.type === 'assignee' ? constructApiAssignee(assigneeIds, data.value as number[]) : data;\n    if (!body) return;\n    updateIssue({ id, body: { ...body, projectId: Number(projectId) } });\n  };\n\n  return (\n    <Model onClose={onClose} className='max-w-[55rem]'>\n      <>\n        <div className='text-[16px] text-gray-600 px-3 mt-3 flex items-center justify-between'>\n          <Item className='mr-3 w-4 h-4' {...types[type]} text={'Issue-' + id} />\n          <div className='text-black'>\n            <button onClick={() => setIsOpen(true)} title='Delete' className='icon-btn text-xl'>\n              <Icon icon='bx:trash' />\n            </button>\n            <button onClick={onClose} title='Close' className='icon-btn text-lg ml-4'>\n              <Icon icon='akar-icons:cross' />\n            </button>\n          </div>\n        </div>\n        <div className='flex mb-8'>\n          <div className='w-full pr-6'>\n            <ChakraProvider>\n              <TextInput\n                type='summary'\n                defaultValue={summary}\n                apiFunc={dispatchMiddleware}\n                className='text-[22px] font-semibold'\n                placeholder='title'\n                isRequired\n              />\n              <TextInput\n                label='Description'\n                type='descr'\n                defaultValue={descr}\n                apiFunc={dispatchMiddleware}\n                placeholder='add a description'\n              />\n            </ChakraProvider>\n          </div>\n          <div className='w-[15rem] shrink-0 mt-3'>\n            <WithLabel label='Status'>\n              <DropDown\n                list={lists}\n                defaultValue={lists.findIndex(({ value: v }) => v === listId)}\n                dispatch={dispatchMiddleware}\n                actionType='listId'\n                type='normal'\n                variant='small'\n              />\n            </WithLabel>\n            {members && (\n              <WithLabel label='Reporter'>\n                <div className='bg-[#f4f5f7] px-3 py-[5px] rounded-sm'>\n                  <Item\n                    {...members.filter(({ value }) => value === reporterId)[0]}\n                    className='w-6 h-6 mr-4 rounded-full object-cover'\n                  />\n                </div>\n              </WithLabel>\n            )}\n            {members && (\n              <WithLabel label='Assignee'>\n                <DropDown\n                  variant='small'\n                  list={members}\n                  defaultValue={assignees.map(({ userId }) => memberObj[userId])}\n                  dispatch={dispatchMiddleware}\n                  actionType='assignee'\n                  type='multiple'\n                />\n              </WithLabel>\n            )}\n            <WithLabel label='Type'>\n              <DropDown\n                variant='small'\n                list={types}\n                defaultValue={types.findIndex(({ value: v }) => v === type)}\n                dispatch={dispatchMiddleware}\n                actionType='type'\n                type='normal'\n              />\n            </WithLabel>\n            <WithLabel label='Priority'>\n              <DropDown\n                variant='small'\n                list={priorities}\n                defaultValue={priority as number}\n                dispatch={dispatchMiddleware}\n                actionType='priority'\n                type='normal'\n              />\n            </WithLabel>\n            <hr className='border-t-[.5px] border-gray-400' />\n            <div className='mt-4 text-sm text-gray-700'>\n              {createdAt && (\n                <span className='block mb-2'>Created - {new Date(createdAt).toLocaleString()}</span>\n              )}\n              {updatedAt && <span>Updated - {new Date(updatedAt).toLocaleString()}</span>}\n            </div>\n          </div>\n        </div>\n        {isOpen && (\n          <Suspense>\n            <ConfirmModel\n              onClose={() => setIsOpen(false)}\n              onSubmit={() => deleteIssue({ issueId: id, projectId })}\n            />\n          </Suspense>\n        )}\n      </>\n    </Model>\n  );\n};\n\nexport default IssueDetailModal;\n\nexport type DispatchMiddleware = { type: UpdateIssueType; value: number | number[] | string };\n"],"names":["props","type","label","defaultValue","placeholder","apiFunc","className","isRequired","useState","value","setValue","isEditing","setIsEditing","WithLabel","labelClass","minRows","onChange","e","newValue","target","onClick","size","borderRadius","variant","mr","colorScheme","ConfirmModel","lazy","issue","projectId","members","lists","types","priorities","onClose","selectIssuesArray","listId","issues","idx","id","reporterId","priority","assignees","summary","descr","createdAt","updatedAt","memberObj","reduce","t","n","useUpdateIssueMutation","updateIssue","useDeleteIssueMutation","deleteIssue","isOpen","setIsOpen","dispatchMiddleware","data","assigneeIds","map","userId","body","OLD","NEW","oldLen","length","newLen","filter","includes","constructApiAssignee","Number","Model","Item","text","title","icon","DropDown","list","findIndex","dispatch","actionType","Date","toLocaleString","Suspense","onSubmit","issueId"],"sourceRoot":""}